rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check user owns resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Cards collection
    match /cards/{cardId} {
      // Allow read if user owns the card
      allow read: if isOwner(resource.data.uid);

      // Allow write if user owns the card and required fields exist
      allow create: if isOwner(request.resource.data.uid) &&
                       request.resource.data.keys().hasAll([
                         'cardNumberLast4',
                         'cardNumberFull',
                         'cvv',
                         'expiry',
                         'bankName',
                         'networkName',
                         'cardHolder',
                         'cardType'
                       ]) &&
                       request.resource.data.cardNumberLast4 is string &&
                       request.resource.data.cardNumberFull is string;

      // Allow update if user owns the card
      allow update: if isOwner(resource.data.uid) &&
                       isOwner(request.resource.data.uid);

      // Allow delete if user owns the card
      allow delete: if isOwner(resource.data.uid);
    }

    // Validation strings (for master password)
    match /validationStrings/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Mobile numbers (for bill pay)
    match /mobile_numbers/{docId} {
      allow read: if isAuthenticated() && resource.data.uid == request.auth.uid;
      allow write: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
    }

    // User security (lockout tracking)
    match /userSecurity/{userId} {
      allow read, write: if isOwner(userId);
    }
  }
}