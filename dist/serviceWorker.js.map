{"mappings":"AAAA,MAAMA,WAAa,UACbC,YAAc,CAClB,KACA,eACA,yBACA,uBACA,uBACA,aACA,kBAGFC,KAAKC,iBAAiB,WAAWC,IAC/BA,EAAMC,UACJC,OAAOC,KAbQ,WAcZC,MAAKC,GAASA,EAAMC,OAAOT,eAC3BO,MAAK,IAAMN,KAAKS,gBAAW,IAIlCT,KAAKC,iBAAiB,YAAYC,IAChCA,EAAMC,UACJO,QAAQC,IAAI,CACVX,KAAKY,QAAQC,QACbT,OAAOU,OAAOR,MAAKS,GACVL,QAAQC,IACbI,EACGC,QAAOC,GA1BD,YA0BcA,IACpBC,KAAID,GAAab,OAAOe,OAAOF,UAGvC,IAILjB,KAAKC,iBAAiB,SAASC,IAEzBA,EAAMkB,QAAQC,IAAIC,SAAS,yBAC3BpB,EAAMkB,QAAQC,IAAIC,SAAS,yBAC3BpB,EAAMkB,QAAQC,IAAIC,SAAS,uBAKJ,aAAvBpB,EAAMkB,QAAQG,KAWlBrB,EAAMsB,YACJpB,OAAOqB,MAAMvB,EAAMkB,SAChBd,MAAKoB,IACJ,GAAIA,EACF,OAAOA,EAIT,MAAMC,EAAezB,EAAMkB,QAAQQ,QAEnC,OAAOC,MAAMF,GACVrB,MAAKoB,IAEJ,IAAKA,GAAgC,MAApBA,EAASI,QAAoC,UAAlBJ,EAASK,KACnD,OAAOL,EAGT,MAAMM,EAAkBN,EAASE,QAUjC,OATAxB,OAAOC,KAxEA,WAyEJC,MAAKC,IACJ,IACEA,EAAM0B,IAAI/B,EAAMkB,QAASY,EAC3B,CAAE,MAAOE,GACPC,QAAQD,MAAM,mBAAoBA,EACpC,KAGGR,CAAA,IAERU,OAAMF,IAGL,GAFAC,QAAQD,MAAM,eAAgBA,GAEH,aAAvBhC,EAAMkB,QAAQG,KAChB,OAAOnB,OAAOqB,MAAM,kBAItB,MAAMS,CAAA,GACR,KAhDNhC,EAAMsB,YACJK,MAAM3B,EAAMkB,SACTgB,OAAM,IACEhC,OAAOqB,MAAM,qBA8CxB","sources":["public/serviceWorker.js"],"sourcesContent":["const CACHE_NAME = 'dred-v1';\nconst urlsToCache = [\n  './',\n  './index.html',\n  './manifest.webmanifest',\n  './icons/icon-192.png',\n  './icons/icon-512.png',\n  './logo.png',\n  './offline.html'\n];\n\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => cache.addAll(urlsToCache))\n      .then(() => self.skipWaiting())\n  );\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    Promise.all([\n      self.clients.claim(),\n      caches.keys().then(cacheNames => {\n        return Promise.all(\n          cacheNames\n            .filter(cacheName => cacheName !== CACHE_NAME)\n            .map(cacheName => caches.delete(cacheName))\n        );\n      })\n    ])\n  );\n});\n\nself.addEventListener('fetch', event => {\n  // Skip Google Analytics requests and other known problematic external services\n  if (event.request.url.includes('google-analytics.com') || \n      event.request.url.includes('googletagmanager.com') ||\n      event.request.url.includes('overbridgenet.com')) {\n    return;\n  }\n\n  // Handle navigation requests\n  if (event.request.mode === 'navigate') {\n    event.respondWith(\n      fetch(event.request)\n        .catch(() => {\n          return caches.match('./offline.html');\n        })\n    );\n    return;\n  }\n\n  // Handle other requests\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        if (response) {\n          return response;\n        }\n\n        // Clone the request - fixes the 'Failed to convert value to Response' error\n        const fetchRequest = event.request.clone();\n\n        return fetch(fetchRequest)\n          .then(response => {\n            // Don't cache if not a valid response\n            if (!response || response.status !== 200 || response.type !== 'basic') {\n              return response;\n            }\n\n            const responseToCache = response.clone();\n            caches.open(CACHE_NAME)\n              .then(cache => {\n                try {\n                  cache.put(event.request, responseToCache);\n                } catch (error) {\n                  console.error('Cache put error:', error);\n                }\n              });\n\n            return response;\n          })\n          .catch(error => {\n            console.error('Fetch error:', error);\n            // Return offline page for navigation requests\n            if (event.request.mode === 'navigate') {\n              return caches.match('./offline.html');\n            }\n            \n            // For other requests, just propagate the error\n            throw error;\n          });\n      })\n  );\n}); "],"names":["CACHE_NAME","urlsToCache","self","addEventListener","event","waitUntil","caches","open","then","cache","addAll","skipWaiting","Promise","all","clients","claim","keys","cacheNames","filter","cacheName","map","delete","request","url","includes","mode","respondWith","match","response","fetchRequest","clone","fetch","status","type","responseToCache","put","error","console","catch"],"version":3,"file":"serviceWorker.js.map"}